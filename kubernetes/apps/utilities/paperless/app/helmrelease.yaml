---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app paperless
  namespace: utilities
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  dependsOn:
    - name: cloudnative-pg
      namespace: databases
    - name: onepassword-connect
      namespace: security
  values:
    controllers:
      paperless:
        strategy: RollingUpdate
        annotations:
          secret.reloader.stakater.com/reload: &secret paperless-external-secret
        initContainers:
          01-check-db-ready:
            image:
              repository: postgres
              tag: 17.5
            command: ['sh', '-c',
              'until pg_isready -h ${POSTGRESQL_HOST_INTERNAL} -p 5432;
              do echo Waiting for PostgreSQL database; sleep 5; done;']
          02-initdb:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17.5
            envFrom:
              - secretRef:
                  name: *secret
        containers:
          app:
            image:
              repository: ghcr.io/paperless-ngx/paperless-ngx
              tag: 2.15.3
            env:
              PAPERLESS_TIME_ZONE: "${TIMEZONE}"
              PAPERLESS_ENABLE_HTTP_REMOTE_USER: "true"
              USERMAP_UID: "1026"
              USERMAP_GID: "100"
              # PAPERLESS_HTTP_REMOTE_USER_HEADER_NAME: "HTTP_X_AUTHENTIK_USERNAME"
              PAPERLESS_URL: "https://paperless.${SECRET_DOMAIN}"
              PAPERLESS_WEBSERVER_WORKERS: "2"
              PAPERLESS_TASK_WORKERS: "2"
              PAPERLESS_CONSUMER_POLLING: "120"
              PAPERLESS_CONSUMER_RECURSIVE: "true"
              PAPERLESS_CONSUMPTION_DIR: "/data/nfs/consume"
              PAPERLESS_DATA_DIR: "/library/data"
              PAPERLESS_MEDIA_ROOT: "/library/media"
              PAPERLESS_EXPORT_DIR: "/data/nfs/export"
              PAPERLESS_OCR_LANGUAGES: "eng hin guj kan"
              PAPERLESS_OCR_LANGUAGE: "eng"
              PAPERLESS_FILENAME_FORMAT: "{created_year}/{correspondent}/{created_month}/{title}"
              PAPERLESS_TIKA_ENABLED: "true"
              PAPERLESS_TIKA_ENDPOINT: "http://localhost:9998"
              PAPERLESS_TIKA_GOTENBERG_ENDPOINT: "http://localhost:3000"
            envFrom:
              - secretRef:
                  name: paperless-external-secret
            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5
          gotenburg:
            image:
              repository: thecodingmachine/gotenberg
              tag: 8.20.1
            env:
              DISABLE_GOOGLE_CHROME: "1"
          tika:
            image:
              repository: ghcr.io/paperless-ngx/tika
              tag: 2.9.1-full
    service:
      app:
        controller: paperless
        ports:
          http:
            port: &port 8000
    route:
      app:
        hostnames: ["paperless.${SECRET_DOMAIN}"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: *port
    persistence:
      library:
        enabled: true
        storageClass: nfs-csi
        accessMode: ReadWriteOnce
        type: persistentVolumeClaim
        size: 5Gi
        advancedMounts:
          paperless:
            app:
              - path: /library
                readOnly: false
      nfs-data:
        enabled: true
        storageClass: nfs-csi
        accessMode: ReadWriteOnce
        type: persistentVolumeClaim
        size: 5Gi
        advancedMounts:
          paperless:
            app:
              - path: /data/nfs
                readOnly: false
